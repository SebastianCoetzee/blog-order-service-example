// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SebastianCoetzee/blog-order-service-example/repositories (interfaces: OrderRepository)

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	models "github.com/SebastianCoetzee/blog-order-service-example/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// FindAllOrdersByUserID mocks base method
func (m *MockOrderRepository) FindAllOrdersByUserID(arg0 int) (models.Orders, error) {
	ret := m.ctrl.Call(m, "FindAllOrdersByUserID", arg0)
	ret0, _ := ret[0].(models.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllOrdersByUserID indicates an expected call of FindAllOrdersByUserID
func (mr *MockOrderRepositoryMockRecorder) FindAllOrdersByUserID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllOrdersByUserID", reflect.TypeOf((*MockOrderRepository)(nil).FindAllOrdersByUserID), arg0)
}
